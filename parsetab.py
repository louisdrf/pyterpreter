
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORANDleftEQUALSLOWERHIGHERHIGHEQUALLOWEQUALleftPLUSMINUSleftTIMESDIVIDEMODULOAND COLON COMMA DIVIDE ELSE EQUAL EQUALS FALSE FOR FUNCTION HIGHEQUAL HIGHER IF LBRACKET LOWEQUAL LOWER LPAREN MAIN MAIN MINUS MODULO NAME NUMBER OR PLUS PRINT RBRACKET RETURN RPAREN SPRINT STRING TIMES TRUE WHILE start : linstlinst : linst inst \n            | inst inst : increment COLON\n            | decrement COLONinst : operator_assign COLONincrement : NAME PLUS PLUSdecrement : NAME MINUS MINUSoperator_assign : NAME operator EQUAL expressioninst : assign COLONassign : NAME EQUAL expressioninst : WHILE LPAREN condition RPAREN b_blocinst : FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc\n    | FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc\n    | FOR LPAREN assign COLON condition COLON decrement RPAREN b_blocinst : IF LPAREN condition RPAREN b_bloc\n            | IF LPAREN condition RPAREN b_bloc elseelse : ELSE inst\n            | ELSE b_bloccondition : expression EQUALS expression\n                 | expression LOWER expression\n                 | expression HIGHER expression\n                 | expression HIGHEQUAL expression\n                 | expression LOWEQUAL expression\n                 | expression OR expression\n                 | expression AND expressionexpression : expression operator expressioninst : MAIN LPAREN RPAREN b_blocinst : RETURN expression COLON\n            | RETURN condition COLONinst : FUNCTION NAME LPAREN params RPAREN b_blocexpression : NAME LPAREN call_params RPARENinst : NAME LPAREN call_params RPAREN COLONcall_params : expression COMMA call_params \n                   | expression\n                   | params : NAME COMMA params \n              | NAME\n              | inst : PRINT LPAREN expression RPAREN COLONinst : SPRINT LPAREN STRING RPAREN COLONb_bloc : LBRACKET linst RBRACKEToperator : PLUS\n                | MINUS\n                | DIVIDE\n                | TIMES\n                | MODULOexpression : LPAREN expression RPARENexpression : NUMBERexpression : TRUEexpression : FALSEexpression : NAMEexpression : MINUS expressioninst : params EQUAL multiple_valuesmultiple_values : expression\n                       | expression COMMA multiple_values'
    
_lr_action_items = {'WHILE':([0,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[8,8,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,8,-27,-48,-12,-16,8,-32,-33,-56,-40,-41,-17,8,-42,-31,-18,-19,-13,-14,-15,]),'FOR':([0,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[9,9,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,9,-27,-48,-12,-16,9,-32,-33,-56,-40,-41,-17,9,-42,-31,-18,-19,-13,-14,-15,]),'IF':([0,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[10,10,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,10,-27,-48,-12,-16,10,-32,-33,-56,-40,-41,-17,10,-42,-31,-18,-19,-13,-14,-15,]),'MAIN':([0,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[11,11,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,11,-27,-48,-12,-16,11,-32,-33,-56,-40,-41,-17,11,-42,-31,-18,-19,-13,-14,-15,]),'RETURN':([0,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[12,12,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,12,-27,-48,-12,-16,12,-32,-33,-56,-40,-41,-17,12,-42,-31,-18,-19,-13,-14,-15,]),'FUNCTION':([0,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[13,13,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,13,-27,-48,-12,-16,13,-32,-33,-56,-40,-41,-17,13,-42,-31,-18,-19,-13,-14,-15,]),'NAME':([0,2,3,12,13,18,19,20,21,22,23,24,25,29,30,31,32,33,34,36,40,41,42,43,44,45,46,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,74,78,79,83,85,86,87,96,99,101,104,106,107,108,110,112,113,114,115,116,117,118,119,124,125,129,130,131,],[14,14,-3,29,35,-2,-4,-5,-6,-10,29,51,29,-52,29,-49,-50,-51,29,29,29,76,-45,-46,-47,29,29,-29,29,29,29,29,29,29,29,29,-43,-44,-30,29,-53,76,29,-54,-55,29,-28,14,-27,-48,29,29,-12,-16,14,-32,-33,-56,-40,-41,123,-17,14,-42,-31,-18,-19,-13,-14,-15,]),'PRINT':([0,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[16,16,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,16,-27,-48,-12,-16,16,-32,-33,-56,-40,-41,-17,16,-42,-31,-18,-19,-13,-14,-15,]),'SPRINT':([0,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[17,17,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,17,-27,-48,-12,-16,17,-32,-33,-56,-40,-41,-17,17,-42,-31,-18,-19,-13,-14,-15,]),'EQUAL':([0,2,3,14,15,18,19,20,21,22,29,31,32,33,37,38,39,41,42,43,44,51,54,65,68,76,77,78,79,85,86,87,96,104,106,107,108,110,112,113,114,116,117,118,119,124,125,129,130,131,],[-39,-39,-3,40,45,-2,-4,-5,-6,-10,-52,-49,-50,-51,-43,-44,74,-39,-45,-46,-47,40,-29,-30,-53,-38,-37,-54,-55,-28,-39,-27,-48,-12,-16,-39,-32,-33,-56,-40,-41,-17,-39,-42,-31,-18,-19,-13,-14,-15,]),'$end':([1,2,3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,87,96,104,106,108,110,112,113,114,116,118,119,124,125,129,130,131,],[0,-1,-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,-27,-48,-12,-16,-32,-33,-56,-40,-41,-17,-42,-31,-18,-19,-13,-14,-15,]),'RBRACKET':([3,18,19,20,21,22,29,31,32,33,54,65,68,78,79,85,87,96,104,106,107,108,110,112,113,114,116,118,119,124,125,129,130,131,],[-3,-2,-4,-5,-6,-10,-52,-49,-50,-51,-29,-30,-53,-54,-55,-28,-27,-48,-12,-16,118,-32,-33,-56,-40,-41,-17,-42,-31,-18,-19,-13,-14,-15,]),'COLON':([4,5,6,7,27,28,29,31,32,33,50,68,72,73,75,87,88,89,90,91,92,93,94,96,98,100,102,103,105,108,],[19,20,21,22,54,65,-52,-49,-50,-51,83,-53,-7,-8,-11,-27,-20,-21,-22,-23,-24,-25,-26,-48,110,-9,113,114,115,-32,]),'LPAREN':([8,9,10,11,12,14,16,17,23,25,29,30,34,35,36,40,42,43,44,45,46,55,56,57,58,59,60,61,62,63,64,66,74,83,99,101,],[23,24,25,26,30,36,46,47,30,30,66,30,30,69,30,30,-45,-46,-47,30,30,30,30,30,30,30,30,30,30,-43,-44,30,30,30,30,30,]),'NUMBER':([12,23,25,30,34,36,40,42,43,44,45,46,55,56,57,58,59,60,61,62,63,64,66,74,83,99,101,],[31,31,31,31,31,31,31,-45,-46,-47,31,31,31,31,31,31,31,31,31,31,-43,-44,31,31,31,31,31,]),'TRUE':([12,23,25,30,34,36,40,42,43,44,45,46,55,56,57,58,59,60,61,62,63,64,66,74,83,99,101,],[32,32,32,32,32,32,32,-45,-46,-47,32,32,32,32,32,32,32,32,32,32,-43,-44,32,32,32,32,32,]),'FALSE':([12,23,25,30,34,36,40,42,43,44,45,46,55,56,57,58,59,60,61,62,63,64,66,74,83,99,101,],[33,33,33,33,33,33,33,-45,-46,-47,33,33,33,33,33,33,33,33,33,33,-43,-44,33,33,33,33,33,]),'MINUS':([12,14,23,25,27,29,30,31,32,33,34,36,38,40,42,43,44,45,46,49,55,56,57,58,59,60,61,62,63,64,66,67,68,71,74,75,79,80,83,87,88,89,90,91,92,93,94,96,99,100,101,108,123,],[34,38,34,34,64,-52,34,-49,-50,-51,34,34,73,34,-45,-46,-47,34,34,64,34,34,34,34,34,34,34,34,-43,-44,34,64,-53,64,34,64,64,64,34,64,64,64,64,64,64,64,64,-48,34,64,34,-32,38,]),'PLUS':([14,27,29,31,32,33,37,49,67,68,71,75,79,80,87,88,89,90,91,92,93,94,96,100,108,123,],[37,63,-52,-49,-50,-51,72,63,63,-53,63,63,63,63,63,63,63,63,63,63,63,63,-48,63,-32,37,]),'COMMA':([14,29,31,32,33,68,71,76,79,87,96,108,],[41,-52,-49,-50,-51,-53,99,41,101,-27,-48,-32,]),'DIVIDE':([14,27,29,31,32,33,49,67,68,71,75,79,80,87,88,89,90,91,92,93,94,96,100,108,123,],[42,42,-52,-49,-50,-51,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-48,42,-32,42,]),'TIMES':([14,27,29,31,32,33,49,67,68,71,75,79,80,87,88,89,90,91,92,93,94,96,100,108,123,],[43,43,-52,-49,-50,-51,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-48,43,-32,43,]),'MODULO':([14,27,29,31,32,33,49,67,68,71,75,79,80,87,88,89,90,91,92,93,94,96,100,108,123,],[44,44,-52,-49,-50,-51,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-48,44,-32,44,]),'RPAREN':([26,29,31,32,33,36,41,48,52,66,67,68,69,70,71,72,73,76,77,80,81,87,88,89,90,91,92,93,94,95,96,97,99,100,108,111,120,121,122,],[53,-52,-49,-50,-51,-36,-39,82,84,-36,96,-53,-39,98,-35,-7,-8,-38,-37,102,103,-27,-20,-21,-22,-23,-24,-25,-26,108,-48,109,-36,-9,-32,-34,126,127,128,]),'EQUALS':([27,29,31,32,33,49,68,87,96,108,],[56,-52,-49,-50,-51,56,-53,-27,-48,-32,]),'LOWER':([27,29,31,32,33,49,68,87,96,108,],[57,-52,-49,-50,-51,57,-53,-27,-48,-32,]),'HIGHER':([27,29,31,32,33,49,68,87,96,108,],[58,-52,-49,-50,-51,58,-53,-27,-48,-32,]),'HIGHEQUAL':([27,29,31,32,33,49,68,87,96,108,],[59,-52,-49,-50,-51,59,-53,-27,-48,-32,]),'LOWEQUAL':([27,29,31,32,33,49,68,87,96,108,],[60,-52,-49,-50,-51,60,-53,-27,-48,-32,]),'OR':([27,29,31,32,33,49,68,87,96,108,],[61,-52,-49,-50,-51,61,-53,-27,-48,-32,]),'AND':([27,29,31,32,33,49,68,87,96,108,],[62,-52,-49,-50,-51,62,-53,-27,-48,-32,]),'STRING':([47,],[81,]),'LBRACKET':([53,82,84,109,117,126,127,128,],[86,86,86,86,86,86,86,86,]),'ELSE':([106,118,],[117,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'linst':([0,86,],[2,107,]),'inst':([0,2,86,107,117,],[3,18,3,18,124,]),'increment':([0,2,86,107,115,117,],[4,4,4,4,120,4,]),'decrement':([0,2,86,107,115,117,],[5,5,5,5,122,5,]),'operator_assign':([0,2,86,107,115,117,],[6,6,6,6,121,6,]),'assign':([0,2,24,86,107,117,],[7,7,50,7,7,7,]),'params':([0,2,41,69,86,107,117,],[15,15,77,97,15,15,15,]),'expression':([12,23,25,30,34,36,40,45,46,55,56,57,58,59,60,61,62,66,74,83,99,101,],[27,49,49,67,68,71,75,79,80,87,88,89,90,91,92,93,94,71,100,49,71,79,]),'condition':([12,23,25,83,],[28,48,52,105,]),'operator':([14,27,49,67,68,71,75,79,80,87,88,89,90,91,92,93,94,100,123,],[39,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,39,]),'call_params':([36,66,99,],[70,95,111,]),'multiple_values':([45,101,],[78,112,]),'b_bloc':([53,82,84,109,117,126,127,128,],[85,104,106,119,125,129,130,131,]),'else':([106,],[116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> linst','start',1,'p_start','parser_rules.py',13),
  ('linst -> linst inst','linst',2,'p_line','parser_rules.py',23),
  ('linst -> inst','linst',1,'p_line','parser_rules.py',24),
  ('inst -> increment COLON','inst',2,'p_statement_increment_decrement','parser_rules.py',36),
  ('inst -> decrement COLON','inst',2,'p_statement_increment_decrement','parser_rules.py',37),
  ('inst -> operator_assign COLON','inst',2,'p_statement_add_assign','parser_rules.py',41),
  ('increment -> NAME PLUS PLUS','increment',3,'p_expression_increment','parser_rules.py',46),
  ('decrement -> NAME MINUS MINUS','decrement',3,'p_expression_decrement','parser_rules.py',50),
  ('operator_assign -> NAME operator EQUAL expression','operator_assign',4,'p_expression_operator_assign','parser_rules.py',54),
  ('inst -> assign COLON','inst',2,'p_statement_assign','parser_rules.py',62),
  ('assign -> NAME EQUAL expression','assign',3,'p_expression_assign','parser_rules.py',67),
  ('inst -> WHILE LPAREN condition RPAREN b_bloc','inst',5,'p_statement_while','parser_rules.py',75),
  ('inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc','inst',9,'p_statement_for','parser_rules.py',79),
  ('inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc','inst',9,'p_statement_for','parser_rules.py',80),
  ('inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc','inst',9,'p_statement_for','parser_rules.py',81),
  ('inst -> IF LPAREN condition RPAREN b_bloc','inst',5,'p_expression_if','parser_rules.py',87),
  ('inst -> IF LPAREN condition RPAREN b_bloc else','inst',6,'p_expression_if','parser_rules.py',88),
  ('else -> ELSE inst','else',2,'p_expression_else','parser_rules.py',96),
  ('else -> ELSE b_bloc','else',2,'p_expression_else','parser_rules.py',97),
  ('condition -> expression EQUALS expression','condition',3,'p_expression_condition','parser_rules.py',102),
  ('condition -> expression LOWER expression','condition',3,'p_expression_condition','parser_rules.py',103),
  ('condition -> expression HIGHER expression','condition',3,'p_expression_condition','parser_rules.py',104),
  ('condition -> expression HIGHEQUAL expression','condition',3,'p_expression_condition','parser_rules.py',105),
  ('condition -> expression LOWEQUAL expression','condition',3,'p_expression_condition','parser_rules.py',106),
  ('condition -> expression OR expression','condition',3,'p_expression_condition','parser_rules.py',107),
  ('condition -> expression AND expression','condition',3,'p_expression_condition','parser_rules.py',108),
  ('expression -> expression operator expression','expression',3,'p_expression_operator','parser_rules.py',115),
  ('inst -> MAIN LPAREN RPAREN b_bloc','inst',4,'p_expression_main','parser_rules.py',122),
  ('inst -> RETURN expression COLON','inst',3,'p_statement_return','parser_rules.py',126),
  ('inst -> RETURN condition COLON','inst',3,'p_statement_return','parser_rules.py',127),
  ('inst -> FUNCTION NAME LPAREN params RPAREN b_bloc','inst',6,'p_statement_function','parser_rules.py',132),
  ('expression -> NAME LPAREN call_params RPAREN','expression',4,'p_statement_call_function_value','parser_rules.py',137),
  ('inst -> NAME LPAREN call_params RPAREN COLON','inst',5,'p_statement_call_function_void','parser_rules.py',143),
  ('call_params -> expression COMMA call_params','call_params',3,'p_expression_call_params','parser_rules.py',148),
  ('call_params -> expression','call_params',1,'p_expression_call_params','parser_rules.py',149),
  ('call_params -> <empty>','call_params',0,'p_expression_call_params','parser_rules.py',150),
  ('params -> NAME COMMA params','params',3,'p_expression_params','parser_rules.py',163),
  ('params -> NAME','params',1,'p_expression_params','parser_rules.py',164),
  ('params -> <empty>','params',0,'p_expression_params','parser_rules.py',165),
  ('inst -> PRINT LPAREN expression RPAREN COLON','inst',5,'p_statement_print','parser_rules.py',177),
  ('inst -> SPRINT LPAREN STRING RPAREN COLON','inst',5,'p_statement_print_string','parser_rules.py',181),
  ('b_bloc -> LBRACKET linst RBRACKET','b_bloc',3,'p_expression_bracket_bloc','parser_rules.py',187),
  ('operator -> PLUS','operator',1,'p_operator','parser_rules.py',192),
  ('operator -> MINUS','operator',1,'p_operator','parser_rules.py',193),
  ('operator -> DIVIDE','operator',1,'p_operator','parser_rules.py',194),
  ('operator -> TIMES','operator',1,'p_operator','parser_rules.py',195),
  ('operator -> MODULO','operator',1,'p_operator','parser_rules.py',196),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser_rules.py',200),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser_rules.py',204),
  ('expression -> TRUE','expression',1,'p_expression_true','parser_rules.py',208),
  ('expression -> FALSE','expression',1,'p_expression_false','parser_rules.py',212),
  ('expression -> NAME','expression',1,'p_expression_name','parser_rules.py',216),
  ('expression -> MINUS expression','expression',2,'p_expression_inverse','parser_rules.py',220),
  ('inst -> params EQUAL multiple_values','inst',3,'p_statement_multiple_assign','parser_rules.py',224),
  ('multiple_values -> expression','multiple_values',1,'p_expression_multiple_values','parser_rules.py',228),
  ('multiple_values -> expression COMMA multiple_values','multiple_values',3,'p_expression_multiple_values','parser_rules.py',229),
]
