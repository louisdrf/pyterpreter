Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    THEN

Grammar

Rule 0     S' -> start
Rule 1     start -> linst
Rule 2     linst -> linst inst
Rule 3     linst -> inst
Rule 4     inst -> increment COLON
Rule 5     inst -> decrement COLON
Rule 6     inst -> operator_assign COLON
Rule 7     increment -> NAME PLUS PLUS
Rule 8     decrement -> NAME MINUS MINUS
Rule 9     operator_assign -> NAME operator EQUAL expression
Rule 10    inst -> assign COLON
Rule 11    assign -> NAME EQUAL expression
Rule 12    inst -> WHILE LPAREN condition RPAREN b_bloc
Rule 13    inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc
Rule 14    inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc
Rule 15    inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc
Rule 16    inst -> IF LPAREN condition RPAREN b_bloc
Rule 17    condition -> expression EQUALS expression
Rule 18    condition -> expression LOWER expression
Rule 19    condition -> expression HIGHER expression
Rule 20    condition -> expression OR expression
Rule 21    condition -> expression AND expression
Rule 22    expression -> expression PLUS expression
Rule 23    expression -> expression TIMES expression
Rule 24    expression -> expression DIVIDE expression
Rule 25    expression -> expression MINUS expression
Rule 26    inst -> FUNCTION NAME LPAREN params RPAREN b_bloc
Rule 27    inst -> NAME LPAREN RPAREN COLON
Rule 28    params -> NAME COMMA params
Rule 29    params -> NAME
Rule 30    inst -> PRINT LPAREN expression RPAREN COLON
Rule 31    b_bloc -> LBRACKET linst RBRACKET
Rule 32    operator -> PLUS
Rule 33    operator -> MINUS
Rule 34    operator -> DIVIDE
Rule 35    operator -> TIMES
Rule 36    expression -> LPAREN expression RPAREN
Rule 37    expression -> NUMBER
Rule 38    expression -> NAME

Terminals, with rules where they appear

AND                  : 21
COLON                : 4 5 6 10 13 13 14 14 15 15 27 30
COMMA                : 28
DIVIDE               : 24 34
EQUAL                : 9 11
EQUALS               : 17
FOR                  : 13 14 15
FUNCTION             : 26
HIGHER               : 19
IF                   : 16
LBRACKET             : 31
LOWER                : 18
LPAREN               : 12 13 14 15 16 26 27 30 36
MINUS                : 8 8 25 33
NAME                 : 7 8 9 11 26 27 28 29 38
NUMBER               : 37
OR                   : 20
PLUS                 : 7 7 22 32
PRINT                : 30
RBRACKET             : 31
RETURN               : 
RPAREN               : 12 13 14 15 16 26 27 30 36
THEN                 : 
TIMES                : 23 35
WHILE                : 12
error                : 

Nonterminals, with rules where they appear

assign               : 10 13 14 15
b_bloc               : 12 13 14 15 16 26
condition            : 12 13 14 15 16
decrement            : 5 15
expression           : 9 11 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 30 36
increment            : 4 13
inst                 : 2 3
linst                : 1 2 31
operator             : 9
operator_assign      : 6 14
params               : 26 28
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . linst
    (2) linst -> . linst inst
    (3) linst -> . inst
    (4) inst -> . increment COLON
    (5) inst -> . decrement COLON
    (6) inst -> . operator_assign COLON
    (10) inst -> . assign COLON
    (12) inst -> . WHILE LPAREN condition RPAREN b_bloc
    (13) inst -> . FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc
    (14) inst -> . FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc
    (15) inst -> . FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc
    (16) inst -> . IF LPAREN condition RPAREN b_bloc
    (26) inst -> . FUNCTION NAME LPAREN params RPAREN b_bloc
    (27) inst -> . NAME LPAREN RPAREN COLON
    (30) inst -> . PRINT LPAREN expression RPAREN COLON
    (7) increment -> . NAME PLUS PLUS
    (8) decrement -> . NAME MINUS MINUS
    (9) operator_assign -> . NAME operator EQUAL expression
    (11) assign -> . NAME EQUAL expression

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    FUNCTION        shift and go to state 11
    NAME            shift and go to state 12
    PRINT           shift and go to state 13

    start                          shift and go to state 1
    linst                          shift and go to state 2
    inst                           shift and go to state 3
    increment                      shift and go to state 4
    decrement                      shift and go to state 5
    operator_assign                shift and go to state 6
    assign                         shift and go to state 7

state 1

    (0) S' -> start .



state 2

    (1) start -> linst .
    (2) linst -> linst . inst
    (4) inst -> . increment COLON
    (5) inst -> . decrement COLON
    (6) inst -> . operator_assign COLON
    (10) inst -> . assign COLON
    (12) inst -> . WHILE LPAREN condition RPAREN b_bloc
    (13) inst -> . FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc
    (14) inst -> . FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc
    (15) inst -> . FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc
    (16) inst -> . IF LPAREN condition RPAREN b_bloc
    (26) inst -> . FUNCTION NAME LPAREN params RPAREN b_bloc
    (27) inst -> . NAME LPAREN RPAREN COLON
    (30) inst -> . PRINT LPAREN expression RPAREN COLON
    (7) increment -> . NAME PLUS PLUS
    (8) decrement -> . NAME MINUS MINUS
    (9) operator_assign -> . NAME operator EQUAL expression
    (11) assign -> . NAME EQUAL expression

    $end            reduce using rule 1 (start -> linst .)
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    FUNCTION        shift and go to state 11
    NAME            shift and go to state 12
    PRINT           shift and go to state 13

    inst                           shift and go to state 14
    increment                      shift and go to state 4
    decrement                      shift and go to state 5
    operator_assign                shift and go to state 6
    assign                         shift and go to state 7

state 3

    (3) linst -> inst .

    WHILE           reduce using rule 3 (linst -> inst .)
    FOR             reduce using rule 3 (linst -> inst .)
    IF              reduce using rule 3 (linst -> inst .)
    FUNCTION        reduce using rule 3 (linst -> inst .)
    NAME            reduce using rule 3 (linst -> inst .)
    PRINT           reduce using rule 3 (linst -> inst .)
    $end            reduce using rule 3 (linst -> inst .)
    RBRACKET        reduce using rule 3 (linst -> inst .)


state 4

    (4) inst -> increment . COLON

    COLON           shift and go to state 15


state 5

    (5) inst -> decrement . COLON

    COLON           shift and go to state 16


state 6

    (6) inst -> operator_assign . COLON

    COLON           shift and go to state 17


state 7

    (10) inst -> assign . COLON

    COLON           shift and go to state 18


state 8

    (12) inst -> WHILE . LPAREN condition RPAREN b_bloc

    LPAREN          shift and go to state 19


state 9

    (13) inst -> FOR . LPAREN assign COLON condition COLON increment RPAREN b_bloc
    (14) inst -> FOR . LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc
    (15) inst -> FOR . LPAREN assign COLON condition COLON decrement RPAREN b_bloc

    LPAREN          shift and go to state 20


state 10

    (16) inst -> IF . LPAREN condition RPAREN b_bloc

    LPAREN          shift and go to state 21


state 11

    (26) inst -> FUNCTION . NAME LPAREN params RPAREN b_bloc

    NAME            shift and go to state 22


state 12

    (27) inst -> NAME . LPAREN RPAREN COLON
    (7) increment -> NAME . PLUS PLUS
    (8) decrement -> NAME . MINUS MINUS
    (9) operator_assign -> NAME . operator EQUAL expression
    (11) assign -> NAME . EQUAL expression
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . DIVIDE
    (35) operator -> . TIMES

    LPAREN          shift and go to state 23
    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    EQUAL           shift and go to state 27
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29

    operator                       shift and go to state 26

state 13

    (30) inst -> PRINT . LPAREN expression RPAREN COLON

    LPAREN          shift and go to state 30


state 14

    (2) linst -> linst inst .

    WHILE           reduce using rule 2 (linst -> linst inst .)
    FOR             reduce using rule 2 (linst -> linst inst .)
    IF              reduce using rule 2 (linst -> linst inst .)
    FUNCTION        reduce using rule 2 (linst -> linst inst .)
    NAME            reduce using rule 2 (linst -> linst inst .)
    PRINT           reduce using rule 2 (linst -> linst inst .)
    $end            reduce using rule 2 (linst -> linst inst .)
    RBRACKET        reduce using rule 2 (linst -> linst inst .)


state 15

    (4) inst -> increment COLON .

    WHILE           reduce using rule 4 (inst -> increment COLON .)
    FOR             reduce using rule 4 (inst -> increment COLON .)
    IF              reduce using rule 4 (inst -> increment COLON .)
    FUNCTION        reduce using rule 4 (inst -> increment COLON .)
    NAME            reduce using rule 4 (inst -> increment COLON .)
    PRINT           reduce using rule 4 (inst -> increment COLON .)
    $end            reduce using rule 4 (inst -> increment COLON .)
    RBRACKET        reduce using rule 4 (inst -> increment COLON .)


state 16

    (5) inst -> decrement COLON .

    WHILE           reduce using rule 5 (inst -> decrement COLON .)
    FOR             reduce using rule 5 (inst -> decrement COLON .)
    IF              reduce using rule 5 (inst -> decrement COLON .)
    FUNCTION        reduce using rule 5 (inst -> decrement COLON .)
    NAME            reduce using rule 5 (inst -> decrement COLON .)
    PRINT           reduce using rule 5 (inst -> decrement COLON .)
    $end            reduce using rule 5 (inst -> decrement COLON .)
    RBRACKET        reduce using rule 5 (inst -> decrement COLON .)


state 17

    (6) inst -> operator_assign COLON .

    WHILE           reduce using rule 6 (inst -> operator_assign COLON .)
    FOR             reduce using rule 6 (inst -> operator_assign COLON .)
    IF              reduce using rule 6 (inst -> operator_assign COLON .)
    FUNCTION        reduce using rule 6 (inst -> operator_assign COLON .)
    NAME            reduce using rule 6 (inst -> operator_assign COLON .)
    PRINT           reduce using rule 6 (inst -> operator_assign COLON .)
    $end            reduce using rule 6 (inst -> operator_assign COLON .)
    RBRACKET        reduce using rule 6 (inst -> operator_assign COLON .)


state 18

    (10) inst -> assign COLON .

    WHILE           reduce using rule 10 (inst -> assign COLON .)
    FOR             reduce using rule 10 (inst -> assign COLON .)
    IF              reduce using rule 10 (inst -> assign COLON .)
    FUNCTION        reduce using rule 10 (inst -> assign COLON .)
    NAME            reduce using rule 10 (inst -> assign COLON .)
    PRINT           reduce using rule 10 (inst -> assign COLON .)
    $end            reduce using rule 10 (inst -> assign COLON .)
    RBRACKET        reduce using rule 10 (inst -> assign COLON .)


state 19

    (12) inst -> WHILE LPAREN . condition RPAREN b_bloc
    (17) condition -> . expression EQUALS expression
    (18) condition -> . expression LOWER expression
    (19) condition -> . expression HIGHER expression
    (20) condition -> . expression OR expression
    (21) condition -> . expression AND expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    condition                      shift and go to state 32
    expression                     shift and go to state 33

state 20

    (13) inst -> FOR LPAREN . assign COLON condition COLON increment RPAREN b_bloc
    (14) inst -> FOR LPAREN . assign COLON condition COLON operator_assign RPAREN b_bloc
    (15) inst -> FOR LPAREN . assign COLON condition COLON decrement RPAREN b_bloc
    (11) assign -> . NAME EQUAL expression

    NAME            shift and go to state 37

    assign                         shift and go to state 36

state 21

    (16) inst -> IF LPAREN . condition RPAREN b_bloc
    (17) condition -> . expression EQUALS expression
    (18) condition -> . expression LOWER expression
    (19) condition -> . expression HIGHER expression
    (20) condition -> . expression OR expression
    (21) condition -> . expression AND expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    condition                      shift and go to state 38
    expression                     shift and go to state 33

state 22

    (26) inst -> FUNCTION NAME . LPAREN params RPAREN b_bloc

    LPAREN          shift and go to state 39


state 23

    (27) inst -> NAME LPAREN . RPAREN COLON

    RPAREN          shift and go to state 40


state 24

    (7) increment -> NAME PLUS . PLUS
    (32) operator -> PLUS .

    PLUS            shift and go to state 41
    EQUAL           reduce using rule 32 (operator -> PLUS .)


state 25

    (8) decrement -> NAME MINUS . MINUS
    (33) operator -> MINUS .

    MINUS           shift and go to state 42
    EQUAL           reduce using rule 33 (operator -> MINUS .)


state 26

    (9) operator_assign -> NAME operator . EQUAL expression

    EQUAL           shift and go to state 43


state 27

    (11) assign -> NAME EQUAL . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 44

state 28

    (34) operator -> DIVIDE .

    EQUAL           reduce using rule 34 (operator -> DIVIDE .)


state 29

    (35) operator -> TIMES .

    EQUAL           reduce using rule 35 (operator -> TIMES .)


state 30

    (30) inst -> PRINT LPAREN . expression RPAREN COLON
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 45

state 31

    (36) expression -> LPAREN . expression RPAREN
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 46

state 32

    (12) inst -> WHILE LPAREN condition . RPAREN b_bloc

    RPAREN          shift and go to state 47


state 33

    (17) condition -> expression . EQUALS expression
    (18) condition -> expression . LOWER expression
    (19) condition -> expression . HIGHER expression
    (20) condition -> expression . OR expression
    (21) condition -> expression . AND expression
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    EQUALS          shift and go to state 48
    LOWER           shift and go to state 49
    HIGHER          shift and go to state 50
    OR              shift and go to state 51
    AND             shift and go to state 52
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 34

    (37) expression -> NUMBER .

    EQUALS          reduce using rule 37 (expression -> NUMBER .)
    LOWER           reduce using rule 37 (expression -> NUMBER .)
    HIGHER          reduce using rule 37 (expression -> NUMBER .)
    OR              reduce using rule 37 (expression -> NUMBER .)
    AND             reduce using rule 37 (expression -> NUMBER .)
    PLUS            reduce using rule 37 (expression -> NUMBER .)
    TIMES           reduce using rule 37 (expression -> NUMBER .)
    DIVIDE          reduce using rule 37 (expression -> NUMBER .)
    MINUS           reduce using rule 37 (expression -> NUMBER .)
    COLON           reduce using rule 37 (expression -> NUMBER .)
    RPAREN          reduce using rule 37 (expression -> NUMBER .)


state 35

    (38) expression -> NAME .

    EQUALS          reduce using rule 38 (expression -> NAME .)
    LOWER           reduce using rule 38 (expression -> NAME .)
    HIGHER          reduce using rule 38 (expression -> NAME .)
    OR              reduce using rule 38 (expression -> NAME .)
    AND             reduce using rule 38 (expression -> NAME .)
    PLUS            reduce using rule 38 (expression -> NAME .)
    TIMES           reduce using rule 38 (expression -> NAME .)
    DIVIDE          reduce using rule 38 (expression -> NAME .)
    MINUS           reduce using rule 38 (expression -> NAME .)
    COLON           reduce using rule 38 (expression -> NAME .)
    RPAREN          reduce using rule 38 (expression -> NAME .)


state 36

    (13) inst -> FOR LPAREN assign . COLON condition COLON increment RPAREN b_bloc
    (14) inst -> FOR LPAREN assign . COLON condition COLON operator_assign RPAREN b_bloc
    (15) inst -> FOR LPAREN assign . COLON condition COLON decrement RPAREN b_bloc

    COLON           shift and go to state 57


state 37

    (11) assign -> NAME . EQUAL expression

    EQUAL           shift and go to state 27


state 38

    (16) inst -> IF LPAREN condition . RPAREN b_bloc

    RPAREN          shift and go to state 58


state 39

    (26) inst -> FUNCTION NAME LPAREN . params RPAREN b_bloc
    (28) params -> . NAME COMMA params
    (29) params -> . NAME

    NAME            shift and go to state 59

    params                         shift and go to state 60

state 40

    (27) inst -> NAME LPAREN RPAREN . COLON

    COLON           shift and go to state 61


state 41

    (7) increment -> NAME PLUS PLUS .

    COLON           reduce using rule 7 (increment -> NAME PLUS PLUS .)
    RPAREN          reduce using rule 7 (increment -> NAME PLUS PLUS .)


state 42

    (8) decrement -> NAME MINUS MINUS .

    COLON           reduce using rule 8 (decrement -> NAME MINUS MINUS .)
    RPAREN          reduce using rule 8 (decrement -> NAME MINUS MINUS .)


state 43

    (9) operator_assign -> NAME operator EQUAL . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 62

state 44

    (11) assign -> NAME EQUAL expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    COLON           reduce using rule 11 (assign -> NAME EQUAL expression .)
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 45

    (30) inst -> PRINT LPAREN expression . RPAREN COLON
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    RPAREN          shift and go to state 63
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 46

    (36) expression -> LPAREN expression . RPAREN
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    RPAREN          shift and go to state 64
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 47

    (12) inst -> WHILE LPAREN condition RPAREN . b_bloc
    (31) b_bloc -> . LBRACKET linst RBRACKET

    LBRACKET        shift and go to state 66

    b_bloc                         shift and go to state 65

state 48

    (17) condition -> expression EQUALS . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 67

state 49

    (18) condition -> expression LOWER . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 68

state 50

    (19) condition -> expression HIGHER . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 69

state 51

    (20) condition -> expression OR . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 70

state 52

    (21) condition -> expression AND . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 71

state 53

    (22) expression -> expression PLUS . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 72

state 54

    (23) expression -> expression TIMES . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 73

state 55

    (24) expression -> expression DIVIDE . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 74

state 56

    (25) expression -> expression MINUS . expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    expression                     shift and go to state 75

state 57

    (13) inst -> FOR LPAREN assign COLON . condition COLON increment RPAREN b_bloc
    (14) inst -> FOR LPAREN assign COLON . condition COLON operator_assign RPAREN b_bloc
    (15) inst -> FOR LPAREN assign COLON . condition COLON decrement RPAREN b_bloc
    (17) condition -> . expression EQUALS expression
    (18) condition -> . expression LOWER expression
    (19) condition -> . expression HIGHER expression
    (20) condition -> . expression OR expression
    (21) condition -> . expression AND expression
    (22) expression -> . expression PLUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MINUS expression
    (36) expression -> . LPAREN expression RPAREN
    (37) expression -> . NUMBER
    (38) expression -> . NAME

    LPAREN          shift and go to state 31
    NUMBER          shift and go to state 34
    NAME            shift and go to state 35

    condition                      shift and go to state 76
    expression                     shift and go to state 33

state 58

    (16) inst -> IF LPAREN condition RPAREN . b_bloc
    (31) b_bloc -> . LBRACKET linst RBRACKET

    LBRACKET        shift and go to state 66

    b_bloc                         shift and go to state 77

state 59

    (28) params -> NAME . COMMA params
    (29) params -> NAME .

    COMMA           shift and go to state 78
    RPAREN          reduce using rule 29 (params -> NAME .)


state 60

    (26) inst -> FUNCTION NAME LPAREN params . RPAREN b_bloc

    RPAREN          shift and go to state 79


state 61

    (27) inst -> NAME LPAREN RPAREN COLON .

    WHILE           reduce using rule 27 (inst -> NAME LPAREN RPAREN COLON .)
    FOR             reduce using rule 27 (inst -> NAME LPAREN RPAREN COLON .)
    IF              reduce using rule 27 (inst -> NAME LPAREN RPAREN COLON .)
    FUNCTION        reduce using rule 27 (inst -> NAME LPAREN RPAREN COLON .)
    NAME            reduce using rule 27 (inst -> NAME LPAREN RPAREN COLON .)
    PRINT           reduce using rule 27 (inst -> NAME LPAREN RPAREN COLON .)
    $end            reduce using rule 27 (inst -> NAME LPAREN RPAREN COLON .)
    RBRACKET        reduce using rule 27 (inst -> NAME LPAREN RPAREN COLON .)


state 62

    (9) operator_assign -> NAME operator EQUAL expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    COLON           reduce using rule 9 (operator_assign -> NAME operator EQUAL expression .)
    RPAREN          reduce using rule 9 (operator_assign -> NAME operator EQUAL expression .)
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 63

    (30) inst -> PRINT LPAREN expression RPAREN . COLON

    COLON           shift and go to state 80


state 64

    (36) expression -> LPAREN expression RPAREN .

    EQUALS          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    LOWER           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    HIGHER          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 36 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 36 (expression -> LPAREN expression RPAREN .)


state 65

    (12) inst -> WHILE LPAREN condition RPAREN b_bloc .

    WHILE           reduce using rule 12 (inst -> WHILE LPAREN condition RPAREN b_bloc .)
    FOR             reduce using rule 12 (inst -> WHILE LPAREN condition RPAREN b_bloc .)
    IF              reduce using rule 12 (inst -> WHILE LPAREN condition RPAREN b_bloc .)
    FUNCTION        reduce using rule 12 (inst -> WHILE LPAREN condition RPAREN b_bloc .)
    NAME            reduce using rule 12 (inst -> WHILE LPAREN condition RPAREN b_bloc .)
    PRINT           reduce using rule 12 (inst -> WHILE LPAREN condition RPAREN b_bloc .)
    $end            reduce using rule 12 (inst -> WHILE LPAREN condition RPAREN b_bloc .)
    RBRACKET        reduce using rule 12 (inst -> WHILE LPAREN condition RPAREN b_bloc .)


state 66

    (31) b_bloc -> LBRACKET . linst RBRACKET
    (2) linst -> . linst inst
    (3) linst -> . inst
    (4) inst -> . increment COLON
    (5) inst -> . decrement COLON
    (6) inst -> . operator_assign COLON
    (10) inst -> . assign COLON
    (12) inst -> . WHILE LPAREN condition RPAREN b_bloc
    (13) inst -> . FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc
    (14) inst -> . FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc
    (15) inst -> . FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc
    (16) inst -> . IF LPAREN condition RPAREN b_bloc
    (26) inst -> . FUNCTION NAME LPAREN params RPAREN b_bloc
    (27) inst -> . NAME LPAREN RPAREN COLON
    (30) inst -> . PRINT LPAREN expression RPAREN COLON
    (7) increment -> . NAME PLUS PLUS
    (8) decrement -> . NAME MINUS MINUS
    (9) operator_assign -> . NAME operator EQUAL expression
    (11) assign -> . NAME EQUAL expression

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    FUNCTION        shift and go to state 11
    NAME            shift and go to state 12
    PRINT           shift and go to state 13

    linst                          shift and go to state 81
    inst                           shift and go to state 3
    increment                      shift and go to state 4
    decrement                      shift and go to state 5
    operator_assign                shift and go to state 6
    assign                         shift and go to state 7

state 67

    (17) condition -> expression EQUALS expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    RPAREN          reduce using rule 17 (condition -> expression EQUALS expression .)
    COLON           reduce using rule 17 (condition -> expression EQUALS expression .)
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 68

    (18) condition -> expression LOWER expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    RPAREN          reduce using rule 18 (condition -> expression LOWER expression .)
    COLON           reduce using rule 18 (condition -> expression LOWER expression .)
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 69

    (19) condition -> expression HIGHER expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    RPAREN          reduce using rule 19 (condition -> expression HIGHER expression .)
    COLON           reduce using rule 19 (condition -> expression HIGHER expression .)
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 70

    (20) condition -> expression OR expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    RPAREN          reduce using rule 20 (condition -> expression OR expression .)
    COLON           reduce using rule 20 (condition -> expression OR expression .)
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 71

    (21) condition -> expression AND expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    RPAREN          reduce using rule 21 (condition -> expression AND expression .)
    COLON           reduce using rule 21 (condition -> expression AND expression .)
    PLUS            shift and go to state 53
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MINUS           shift and go to state 56


state 72

    (22) expression -> expression PLUS expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    EQUALS          reduce using rule 22 (expression -> expression PLUS expression .)
    LOWER           reduce using rule 22 (expression -> expression PLUS expression .)
    HIGHER          reduce using rule 22 (expression -> expression PLUS expression .)
    OR              reduce using rule 22 (expression -> expression PLUS expression .)
    AND             reduce using rule 22 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 22 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 22 (expression -> expression PLUS expression .)
    COLON           reduce using rule 22 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 22 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55

  ! TIMES           [ reduce using rule 22 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 56 ]


state 73

    (23) expression -> expression TIMES expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    EQUALS          reduce using rule 23 (expression -> expression TIMES expression .)
    LOWER           reduce using rule 23 (expression -> expression TIMES expression .)
    HIGHER          reduce using rule 23 (expression -> expression TIMES expression .)
    OR              reduce using rule 23 (expression -> expression TIMES expression .)
    AND             reduce using rule 23 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 23 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 23 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 23 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 23 (expression -> expression TIMES expression .)
    COLON           reduce using rule 23 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 23 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 53 ]
  ! TIMES           [ shift and go to state 54 ]
  ! DIVIDE          [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]


state 74

    (24) expression -> expression DIVIDE expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    EQUALS          reduce using rule 24 (expression -> expression DIVIDE expression .)
    LOWER           reduce using rule 24 (expression -> expression DIVIDE expression .)
    HIGHER          reduce using rule 24 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 24 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 24 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 24 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 24 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 24 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 24 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 24 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 24 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 53 ]
  ! TIMES           [ shift and go to state 54 ]
  ! DIVIDE          [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]


state 75

    (25) expression -> expression MINUS expression .
    (22) expression -> expression . PLUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MINUS expression

    EQUALS          reduce using rule 25 (expression -> expression MINUS expression .)
    LOWER           reduce using rule 25 (expression -> expression MINUS expression .)
    HIGHER          reduce using rule 25 (expression -> expression MINUS expression .)
    OR              reduce using rule 25 (expression -> expression MINUS expression .)
    AND             reduce using rule 25 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 25 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 25 (expression -> expression MINUS expression .)
    COLON           reduce using rule 25 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 25 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55

  ! TIMES           [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 25 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 53 ]
  ! MINUS           [ shift and go to state 56 ]


state 76

    (13) inst -> FOR LPAREN assign COLON condition . COLON increment RPAREN b_bloc
    (14) inst -> FOR LPAREN assign COLON condition . COLON operator_assign RPAREN b_bloc
    (15) inst -> FOR LPAREN assign COLON condition . COLON decrement RPAREN b_bloc

    COLON           shift and go to state 82


state 77

    (16) inst -> IF LPAREN condition RPAREN b_bloc .

    WHILE           reduce using rule 16 (inst -> IF LPAREN condition RPAREN b_bloc .)
    FOR             reduce using rule 16 (inst -> IF LPAREN condition RPAREN b_bloc .)
    IF              reduce using rule 16 (inst -> IF LPAREN condition RPAREN b_bloc .)
    FUNCTION        reduce using rule 16 (inst -> IF LPAREN condition RPAREN b_bloc .)
    NAME            reduce using rule 16 (inst -> IF LPAREN condition RPAREN b_bloc .)
    PRINT           reduce using rule 16 (inst -> IF LPAREN condition RPAREN b_bloc .)
    $end            reduce using rule 16 (inst -> IF LPAREN condition RPAREN b_bloc .)
    RBRACKET        reduce using rule 16 (inst -> IF LPAREN condition RPAREN b_bloc .)


state 78

    (28) params -> NAME COMMA . params
    (28) params -> . NAME COMMA params
    (29) params -> . NAME

    NAME            shift and go to state 59

    params                         shift and go to state 83

state 79

    (26) inst -> FUNCTION NAME LPAREN params RPAREN . b_bloc
    (31) b_bloc -> . LBRACKET linst RBRACKET

    LBRACKET        shift and go to state 66

    b_bloc                         shift and go to state 84

state 80

    (30) inst -> PRINT LPAREN expression RPAREN COLON .

    WHILE           reduce using rule 30 (inst -> PRINT LPAREN expression RPAREN COLON .)
    FOR             reduce using rule 30 (inst -> PRINT LPAREN expression RPAREN COLON .)
    IF              reduce using rule 30 (inst -> PRINT LPAREN expression RPAREN COLON .)
    FUNCTION        reduce using rule 30 (inst -> PRINT LPAREN expression RPAREN COLON .)
    NAME            reduce using rule 30 (inst -> PRINT LPAREN expression RPAREN COLON .)
    PRINT           reduce using rule 30 (inst -> PRINT LPAREN expression RPAREN COLON .)
    $end            reduce using rule 30 (inst -> PRINT LPAREN expression RPAREN COLON .)
    RBRACKET        reduce using rule 30 (inst -> PRINT LPAREN expression RPAREN COLON .)


state 81

    (31) b_bloc -> LBRACKET linst . RBRACKET
    (2) linst -> linst . inst
    (4) inst -> . increment COLON
    (5) inst -> . decrement COLON
    (6) inst -> . operator_assign COLON
    (10) inst -> . assign COLON
    (12) inst -> . WHILE LPAREN condition RPAREN b_bloc
    (13) inst -> . FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc
    (14) inst -> . FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc
    (15) inst -> . FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc
    (16) inst -> . IF LPAREN condition RPAREN b_bloc
    (26) inst -> . FUNCTION NAME LPAREN params RPAREN b_bloc
    (27) inst -> . NAME LPAREN RPAREN COLON
    (30) inst -> . PRINT LPAREN expression RPAREN COLON
    (7) increment -> . NAME PLUS PLUS
    (8) decrement -> . NAME MINUS MINUS
    (9) operator_assign -> . NAME operator EQUAL expression
    (11) assign -> . NAME EQUAL expression

    RBRACKET        shift and go to state 85
    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    FUNCTION        shift and go to state 11
    NAME            shift and go to state 12
    PRINT           shift and go to state 13

    inst                           shift and go to state 14
    increment                      shift and go to state 4
    decrement                      shift and go to state 5
    operator_assign                shift and go to state 6
    assign                         shift and go to state 7

state 82

    (13) inst -> FOR LPAREN assign COLON condition COLON . increment RPAREN b_bloc
    (14) inst -> FOR LPAREN assign COLON condition COLON . operator_assign RPAREN b_bloc
    (15) inst -> FOR LPAREN assign COLON condition COLON . decrement RPAREN b_bloc
    (7) increment -> . NAME PLUS PLUS
    (9) operator_assign -> . NAME operator EQUAL expression
    (8) decrement -> . NAME MINUS MINUS

    NAME            shift and go to state 89

    increment                      shift and go to state 86
    operator_assign                shift and go to state 87
    decrement                      shift and go to state 88

state 83

    (28) params -> NAME COMMA params .

    RPAREN          reduce using rule 28 (params -> NAME COMMA params .)


state 84

    (26) inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .

    WHILE           reduce using rule 26 (inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .)
    FOR             reduce using rule 26 (inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .)
    IF              reduce using rule 26 (inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .)
    FUNCTION        reduce using rule 26 (inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .)
    NAME            reduce using rule 26 (inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .)
    PRINT           reduce using rule 26 (inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .)
    $end            reduce using rule 26 (inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .)
    RBRACKET        reduce using rule 26 (inst -> FUNCTION NAME LPAREN params RPAREN b_bloc .)


state 85

    (31) b_bloc -> LBRACKET linst RBRACKET .

    WHILE           reduce using rule 31 (b_bloc -> LBRACKET linst RBRACKET .)
    FOR             reduce using rule 31 (b_bloc -> LBRACKET linst RBRACKET .)
    IF              reduce using rule 31 (b_bloc -> LBRACKET linst RBRACKET .)
    FUNCTION        reduce using rule 31 (b_bloc -> LBRACKET linst RBRACKET .)
    NAME            reduce using rule 31 (b_bloc -> LBRACKET linst RBRACKET .)
    PRINT           reduce using rule 31 (b_bloc -> LBRACKET linst RBRACKET .)
    $end            reduce using rule 31 (b_bloc -> LBRACKET linst RBRACKET .)
    RBRACKET        reduce using rule 31 (b_bloc -> LBRACKET linst RBRACKET .)


state 86

    (13) inst -> FOR LPAREN assign COLON condition COLON increment . RPAREN b_bloc

    RPAREN          shift and go to state 90


state 87

    (14) inst -> FOR LPAREN assign COLON condition COLON operator_assign . RPAREN b_bloc

    RPAREN          shift and go to state 91


state 88

    (15) inst -> FOR LPAREN assign COLON condition COLON decrement . RPAREN b_bloc

    RPAREN          shift and go to state 92


state 89

    (7) increment -> NAME . PLUS PLUS
    (9) operator_assign -> NAME . operator EQUAL expression
    (8) decrement -> NAME . MINUS MINUS
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . DIVIDE
    (35) operator -> . TIMES

    PLUS            shift and go to state 24
    MINUS           shift and go to state 25
    DIVIDE          shift and go to state 28
    TIMES           shift and go to state 29

    operator                       shift and go to state 26

state 90

    (13) inst -> FOR LPAREN assign COLON condition COLON increment RPAREN . b_bloc
    (31) b_bloc -> . LBRACKET linst RBRACKET

    LBRACKET        shift and go to state 66

    b_bloc                         shift and go to state 93

state 91

    (14) inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN . b_bloc
    (31) b_bloc -> . LBRACKET linst RBRACKET

    LBRACKET        shift and go to state 66

    b_bloc                         shift and go to state 94

state 92

    (15) inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN . b_bloc
    (31) b_bloc -> . LBRACKET linst RBRACKET

    LBRACKET        shift and go to state 66

    b_bloc                         shift and go to state 95

state 93

    (13) inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .

    WHILE           reduce using rule 13 (inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .)
    FOR             reduce using rule 13 (inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .)
    IF              reduce using rule 13 (inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .)
    FUNCTION        reduce using rule 13 (inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .)
    NAME            reduce using rule 13 (inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .)
    PRINT           reduce using rule 13 (inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .)
    $end            reduce using rule 13 (inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .)
    RBRACKET        reduce using rule 13 (inst -> FOR LPAREN assign COLON condition COLON increment RPAREN b_bloc .)


state 94

    (14) inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .

    WHILE           reduce using rule 14 (inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .)
    FOR             reduce using rule 14 (inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .)
    IF              reduce using rule 14 (inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .)
    FUNCTION        reduce using rule 14 (inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .)
    NAME            reduce using rule 14 (inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .)
    PRINT           reduce using rule 14 (inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .)
    $end            reduce using rule 14 (inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .)
    RBRACKET        reduce using rule 14 (inst -> FOR LPAREN assign COLON condition COLON operator_assign RPAREN b_bloc .)


state 95

    (15) inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .

    WHILE           reduce using rule 15 (inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .)
    FOR             reduce using rule 15 (inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .)
    IF              reduce using rule 15 (inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .)
    FUNCTION        reduce using rule 15 (inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .)
    NAME            reduce using rule 15 (inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .)
    PRINT           reduce using rule 15 (inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .)
    $end            reduce using rule 15 (inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .)
    RBRACKET        reduce using rule 15 (inst -> FOR LPAREN assign COLON condition COLON decrement RPAREN b_bloc .)

